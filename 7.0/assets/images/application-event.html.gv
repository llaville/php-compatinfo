digraph {
  graph [rankdir="LR" bgcolor="transparent"]
  node [fillcolor="#FEFECE" style="filled"]
  subgraph cluster_0 {
    graph [bgcolor="burlywood3"]
    label = "Bartlett\\CompatInfo\\Application\\Event\\Dispatcher"
    "Bartlett\\CompatInfo\\Application\\Event\\Dispatcher\\EventDispatcher" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>EventDispatcher</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ __construct(input : Symfony\\Component\\Console\\Input\\InputInterface, profileEventSubscriber : Symfony\\Component\\EventDispatcher\\EventSubscriberInterface, extensionLoader : Bartlett\\CompatInfo\\Application\\Extension\\ExtensionLoaderInterface)</td></tr>
    <tr><td align="left">+ dispatch(event, eventName : string = «unknown») : object</td></tr>
</table></td></tr>
</table>>]
  }
  subgraph cluster_1 {
    label = "Symfony\\Component\\EventDispatcher"
    "Symfony\\Component\\EventDispatcher\\EventDispatcher" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>EventDispatcher</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ __construct()</td></tr>
    <tr><td align="left">+ dispatch(event : object, eventName : string = «unknown») : object</td></tr>
    <tr><td align="left">+ getListeners(eventName : string = «unknown») : array</td></tr>
    <tr><td align="left">+ getListenerPriority(eventName : string, listener) : ?int</td></tr>
    <tr><td align="left">+ hasListeners(eventName : string = «unknown») : bool</td></tr>
    <tr><td align="left">+ addListener(eventName : string, listener, priority : int = 0)</td></tr>
    <tr><td align="left">+ removeListener(eventName : string, listener)</td></tr>
    <tr><td align="left">+ addSubscriber(subscriber : Symfony\\Component\\EventDispatcher\\EventSubscriberInterface)</td></tr>
    <tr><td align="left">+ removeSubscriber(subscriber : Symfony\\Component\\EventDispatcher\\EventSubscriberInterface)</td></tr>
</table></td></tr>
</table>>]
    "Symfony\\Component\\EventDispatcher\\EventDispatcherInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>EventDispatcherInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» addListener(eventName : string, listener : callable, priority : int = 0)</td></tr>
    <tr><td align="left">+ «abstract» addSubscriber(subscriber : Symfony\\Component\\EventDispatcher\\EventSubscriberInterface)</td></tr>
    <tr><td align="left">+ «abstract» removeListener(eventName : string, listener : callable)</td></tr>
    <tr><td align="left">+ «abstract» removeSubscriber(subscriber : Symfony\\Component\\EventDispatcher\\EventSubscriberInterface)</td></tr>
    <tr><td align="left">+ «abstract» getListeners(eventName : string = «unknown») : array</td></tr>
    <tr><td align="left">+ «abstract» getListenerPriority(eventName : string, listener : callable) : ?int</td></tr>
    <tr><td align="left">+ «abstract» hasListeners(eventName : string = «unknown») : bool</td></tr>
</table></td></tr>
</table>>]
    "Symfony\\Component\\EventDispatcher\\GenericEvent" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>GenericEvent</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ __construct(subject : mixed = «unknown», arguments : array = [])</td></tr>
    <tr><td align="left">+ getSubject() : ?mixed</td></tr>
    <tr><td align="left">+ getArgument(key : string) : ?mixed</td></tr>
    <tr><td align="left">+ setArgument(key : string, value : mixed) : static</td></tr>
    <tr><td align="left">+ getArguments() : array</td></tr>
    <tr><td align="left">+ setArguments(args : array = []) : static</td></tr>
    <tr><td align="left">+ hasArgument(key : string) : bool</td></tr>
    <tr><td align="left">+ offsetGet(key : mixed) : ?mixed</td></tr>
    <tr><td align="left">+ offsetSet(key : mixed, value : mixed) : void</td></tr>
    <tr><td align="left">+ offsetUnset(key : mixed) : void</td></tr>
    <tr><td align="left">+ offsetExists(key : mixed) : bool</td></tr>
    <tr><td align="left">+ getIterator() : ArrayIterator</td></tr>
</table></td></tr>
</table>>]
  }
  subgraph cluster_2 {
    label = "Symfony\\Contracts\\EventDispatcher"
    "Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>EventDispatcherInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» dispatch(event : object, eventName : string = «unknown») : object</td></tr>
</table></td></tr>
</table>>]
    "Symfony\\Contracts\\EventDispatcher\\Event" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>Event</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ isPropagationStopped() : bool</td></tr>
    <tr><td align="left">+ stopPropagation() : void</td></tr>
</table></td></tr>
</table>>]
  }
  subgraph cluster_3 {
    label = "Psr\\EventDispatcher"
    "Psr\\EventDispatcher\\EventDispatcherInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>EventDispatcherInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» dispatch(event : object)</td></tr>
</table></td></tr>
</table>>]
    "Psr\\EventDispatcher\\StoppableEventInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>StoppableEventInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» isPropagationStopped() : bool</td></tr>
</table></td></tr>
</table>>]
  }
  subgraph cluster_4 {
    graph [bgcolor="burlywood3"]
    label = "Bartlett\\CompatInfo\\Application\\Event"
    "Bartlett\\CompatInfo\\Application\\Event\\AfterAnalysisEvent" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>AfterAnalysisEvent</b></td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\AfterFileAnalysisInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>AfterFileAnalysisInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» afterAnalyzeFile(event : Bartlett\\CompatInfo\\Application\\Event\\AfterFileAnalysisEvent) : void</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\AfterFileAnalysisEvent" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>AfterFileAnalysisEvent</b></td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\AfterInitializeSniffEvent" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>AfterInitializeSniffEvent</b></td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\AfterProcessNodeEvent" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>AfterProcessNodeEvent</b></td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\AfterProcessNodeInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>AfterProcessNodeInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» afterLeaveNode(event : Bartlett\\CompatInfo\\Application\\Event\\AfterProcessNodeEvent) : void</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\AfterProcessSniffEvent" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>AfterProcessSniffEvent</b></td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\AfterProcessSniffInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>AfterProcessSniffInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» afterLeaveSniff(event : Bartlett\\CompatInfo\\Application\\Event\\AfterProcessSniffEvent) : void</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\AfterTearDownSniffInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>AfterTearDownSniffInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» afterTearDownSniff(event : Bartlett\\CompatInfo\\Application\\Event\\AfterInitializeSniffEvent) : void</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\AfterTraverseAstEvent" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>AfterTraverseAstEvent</b></td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\AfterTraverseAstInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>AfterTraverseAstInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» afterTraverseAst(event : Bartlett\\CompatInfo\\Application\\Event\\AfterTraverseAstEvent) : void</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\BeforeAnalysisEvent" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>BeforeAnalysisEvent</b></td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\BeforeAnalysisInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>BeforeAnalysisInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» beforeAnalysis(event : Bartlett\\CompatInfo\\Application\\Event\\BeforeAnalysisEvent) : void</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\BeforeFileAnalysisEvent" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>BeforeFileAnalysisEvent</b></td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\BeforeFileAnalysisInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>BeforeFileAnalysisInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» beforeAnalyzeFile(event : Bartlett\\CompatInfo\\Application\\Event\\BeforeFileAnalysisEvent) : void</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\BeforeInitializeSniffEvent" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>BeforeInitializeSniffEvent</b></td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\BeforeProcessNodeEvent" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>BeforeProcessNodeEvent</b></td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\BeforeProcessNodeInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>BeforeProcessNodeInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» beforeEnterNode(event : Bartlett\\CompatInfo\\Application\\Event\\BeforeProcessNodeEvent) : void</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\BeforeProcessSniffEvent" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>BeforeProcessSniffEvent</b></td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\BeforeProcessSniffInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>BeforeProcessSniffInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» beforeEnterSniff(event : Bartlett\\CompatInfo\\Application\\Event\\BeforeProcessSniffEvent) : void</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\BeforeSetupSniffInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>BeforeSetupSniffInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» beforeSetupSniff(event : Bartlett\\CompatInfo\\Application\\Event\\BeforeInitializeSniffEvent) : void</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\BeforeTraverseAstEvent" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>BeforeTraverseAstEvent</b></td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\BeforeTraverseAstInterface" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>BeforeTraverseAstInterface</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» beforeTraverseAst(event : Bartlett\\CompatInfo\\Application\\Event\\BeforeTraverseAstEvent) : void</td></tr>
</table></td></tr>
</table>>]
    "Bartlett\\CompatInfo\\Application\\Event\\ErrorEvent" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b><br/>ErrorEvent</b></td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
</table>>]
  }
  subgraph cluster_5 {
    label = 0
    "ArrayAccess" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>ArrayAccess</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» offsetExists(offset : mixed)</td></tr>
    <tr><td align="left">+ «abstract» offsetGet(offset : mixed)</td></tr>
    <tr><td align="left">+ «abstract» offsetSet(offset : mixed, value : mixed)</td></tr>
    <tr><td align="left">+ «abstract» offsetUnset(offset : mixed)</td></tr>
</table></td></tr>
</table>>]
    "IteratorAggregate" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>IteratorAggregate</b></td></tr>
    <tr><td></td></tr>
    <tr><td><table border="0" cellspacing="0" cellpadding="2">
    <tr><td align="left">+ «abstract» getIterator()</td></tr>
</table></td></tr>
</table>>]
    "Traversable" [shape="none" label=<
<table cellspacing="0" border="0" cellborder="1">
    <tr><td bgcolor="#eeeeee"><b>«interface»<br/>Traversable</b></td></tr>
    <tr><td></td></tr>
    <tr><td></td></tr>
</table>>]
  }
  "Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface" -> "Psr\\EventDispatcher\\EventDispatcherInterface" [arrowhead="empty" style="dashed"]
  "Symfony\\Component\\EventDispatcher\\EventDispatcherInterface" -> "Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface" [arrowhead="empty" style="dashed"]
  "Symfony\\Component\\EventDispatcher\\EventDispatcher" -> "Symfony\\Component\\EventDispatcher\\EventDispatcherInterface" [arrowhead="empty" style="dashed"]
  "Bartlett\\CompatInfo\\Application\\Event\\Dispatcher\\EventDispatcher" -> "Symfony\\Component\\EventDispatcher\\EventDispatcher" [arrowhead="empty" style="filled"]
  "Symfony\\Contracts\\EventDispatcher\\Event" -> "Psr\\EventDispatcher\\StoppableEventInterface" [arrowhead="empty" style="dashed"]
  "Symfony\\Component\\EventDispatcher\\GenericEvent" -> "Symfony\\Contracts\\EventDispatcher\\Event" [arrowhead="empty" style="filled"]
  "Symfony\\Component\\EventDispatcher\\GenericEvent" -> "ArrayAccess" [arrowhead="empty" style="dashed"]
  "IteratorAggregate" -> "Traversable" [arrowhead="empty" style="dashed"]
  "Symfony\\Component\\EventDispatcher\\GenericEvent" -> "IteratorAggregate" [arrowhead="empty" style="dashed"]
  "Bartlett\\CompatInfo\\Application\\Event\\AfterAnalysisEvent" -> "Symfony\\Component\\EventDispatcher\\GenericEvent" [arrowhead="empty" style="filled"]
  "Bartlett\\CompatInfo\\Application\\Event\\AfterFileAnalysisEvent" -> "Symfony\\Component\\EventDispatcher\\GenericEvent" [arrowhead="empty" style="filled"]
  "Bartlett\\CompatInfo\\Application\\Event\\AfterInitializeSniffEvent" -> "Symfony\\Component\\EventDispatcher\\GenericEvent" [arrowhead="empty" style="filled"]
  "Bartlett\\CompatInfo\\Application\\Event\\AfterProcessNodeEvent" -> "Symfony\\Component\\EventDispatcher\\GenericEvent" [arrowhead="empty" style="filled"]
  "Bartlett\\CompatInfo\\Application\\Event\\AfterProcessSniffEvent" -> "Symfony\\Component\\EventDispatcher\\GenericEvent" [arrowhead="empty" style="filled"]
  "Bartlett\\CompatInfo\\Application\\Event\\AfterTraverseAstEvent" -> "Symfony\\Component\\EventDispatcher\\GenericEvent" [arrowhead="empty" style="filled"]
  "Bartlett\\CompatInfo\\Application\\Event\\BeforeAnalysisEvent" -> "Symfony\\Component\\EventDispatcher\\GenericEvent" [arrowhead="empty" style="filled"]
  "Bartlett\\CompatInfo\\Application\\Event\\BeforeFileAnalysisEvent" -> "Symfony\\Component\\EventDispatcher\\GenericEvent" [arrowhead="empty" style="filled"]
  "Bartlett\\CompatInfo\\Application\\Event\\BeforeInitializeSniffEvent" -> "Symfony\\Component\\EventDispatcher\\GenericEvent" [arrowhead="empty" style="filled"]
  "Bartlett\\CompatInfo\\Application\\Event\\BeforeProcessNodeEvent" -> "Symfony\\Component\\EventDispatcher\\GenericEvent" [arrowhead="empty" style="filled"]
  "Bartlett\\CompatInfo\\Application\\Event\\BeforeProcessSniffEvent" -> "Symfony\\Component\\EventDispatcher\\GenericEvent" [arrowhead="empty" style="filled"]
  "Bartlett\\CompatInfo\\Application\\Event\\BeforeTraverseAstEvent" -> "Symfony\\Component\\EventDispatcher\\GenericEvent" [arrowhead="empty" style="filled"]
  "Bartlett\\CompatInfo\\Application\\Event\\ErrorEvent" -> "Symfony\\Component\\EventDispatcher\\GenericEvent" [arrowhead="empty" style="filled"]
}
