{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about","title":"About","text":"<p>PHP CompatInfo is a library that can find the minimum version and the extensions required for a piece of code to run.</p> <p>Running on PHP greater or equal than 8.0 for parsing source code in a format PHP 5.2 to PHP 8.2</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Parse source code in format PHP 5.2 to PHP 8.2</li> <li>Detect PHP features for each Major/minor versions</li> <li>Detect versions of all directives, constants, functions, classes, interfaces of 100 extensions and more</li> <li>Display/Inspect list of extensions, and their versions supported</li> </ul>"},{"location":"#components","title":"Components","text":"<ul> <li> <p>Parsing PHP 5, PHP 7 or PHP 8 code into an abstract syntax tree (AST) is provided by the PHP-Parser library.</p> </li> <li> <p>Contextual elements and minimum PHP versions detection provided by following node visitors.</p> </li> </ul>"},{"location":"#php-parser-node-visitors","title":"PHP-Parser Node Visitors","text":"<ul> <li>Parent references with the <code>ParentContextVisitor</code></li> <li>Name Resolution with the <code>NameResolverVisitor</code></li> <li>Version Resolution with the <code>VersionResolverVisitor</code></li> </ul>"},{"location":"#profiler","title":"Profiler","text":"<ul> <li>Data Collector(s) with common <code>DataCollector</code> and specialized <code>VersionDataCollector</code> classes</li> <li>Data Collector(s) contract with the <code>CollectorInterface</code></li> <li>Collector Handler for both Profile and Profiler with <code>CollectorTrait</code></li> <li>Profile information for a single data source with <code>Profile</code></li> </ul>"},{"location":"#sniffs","title":"Sniffs","text":"<p>They are grouped by categories to solve PHP features (from 4.0 to 8.2)</p> <ul> <li>Arrays (3)</li> <li>Attributes (3)</li> <li>Classes (11)</li> <li>Constants (4)</li> <li>ControlStructures (4)</li> <li>Enumerations (1)</li> <li>Expressions (3)</li> <li>Fibers (1)</li> <li>FunctionCalls (1)</li> <li>FunctionDeclarations (7)</li> <li>Generators (1)</li> <li>Keywords (1)</li> <li>Numbers (2)</li> <li>Operators (5)</li> <li>TextProcessing (2)</li> <li>UseDeclarations (2)</li> </ul>"},{"location":"#extensions","title":"Extensions","text":"<p>PHPCompatInfo can be extended by registering objects that implement one or more of the following interfaces:</p> <ul> <li><code>BeforeAnalysisInterface</code></li> <li><code>AfterAnalysisInterface</code></li> <li><code>BeforeFileAnalysisInterface</code></li> <li><code>AfterFileAnalysisInterface</code></li> <li><code>BeforeTraverseAstInterface</code></li> <li><code>AfterTraverseAstInterface</code></li> <li><code>BeforeProcessNodeInterface</code></li> <li><code>AfterProcessNodeInterface</code></li> <li><code>BeforeSetupSniffInterface</code></li> <li><code>AfterTearDownSniffInterface</code></li> <li><code>BeforeProcessSniffInterface</code></li> <li><code>AfterProcessSniffInterface</code></li> </ul> <p>Furthermore, extensions may implement the <code>Symfony\\Component\\EventDispatcher\\EventSubscriberInterface</code> in order to have its event handlers automatically registered with the EventDispatcher when the extension is loaded.</p>"},{"location":"#polyfills","title":"Polyfills","text":"<p>They are identified by services that implements the <code>Bartlett\\CompatInfo\\Application\\Polyfills\\PolyfillInterface</code>.</p>"},{"location":"#configurations","title":"Configuration(s)","text":"<p>Load a config for CLI Application with the <code>--config</code> option.</p> <p>Read How to Load --config With Services in Symfony Console to learn more.</p>"},{"location":"#conditional-code","title":"Conditional Code","text":"<p>Learn what code is consider as conditional, detected or not (with CompatInfo 5.4)</p> <ul> <li>Indirect calls</li> <li>Multiple signatures</li> <li>Other limitations</li> </ul>"},{"location":"#exclude-folders","title":"Exclude folder(s)","text":"<p>Sometimes you don't want to scan a certain directory while analysing data source.</p> <p>Learn how to do from console (CLI) or php script (API).</p>"},{"location":"getting-started/","title":"Getting-Started","text":""},{"location":"getting-started/#getting-started","title":"Getting started","text":""},{"location":"getting-started/#requirements","title":"Requirements","text":"<ul> <li>PHP 8.0 or greater</li> <li>ext-json</li> <li>ext-pcre</li> <li>ext-spl</li> <li>PHPUnit 9 or greater (if you want to run unit tests)</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#with-composer","title":"With Composer","text":"<p>Install the PHP CompatInfo with Composer. If you don't know yet what is composer, have a look on introduction.</p> <pre><code>composer require bartlett/php-compatinfo ^7\n</code></pre>"},{"location":"getting-started/#with-git","title":"With Git","text":"<p>The PHP CompatInfo can be directly used from GitHub by cloning the repository into a directory of your choice.</p> <pre><code>git clone -b 7.0 https://github.com/llaville/php-compatinfo.git\n</code></pre>"},{"location":"getting-started/#configuring-the-database","title":"Configuring the Database","text":"<p>The database connection information is stored as an environment variable called <code>DATABASE_URL</code>.</p> <pre><code># to use mysql:\nDATABASE_URL=\"mysql://db_user:db_password@127.0.0.1:3306/db_name?serverVersion=5.7\"\n\n# to use mariadb:\nDATABASE_URL=\"mysql://db_user:db_password@127.0.0.1:3306/db_name?serverVersion=mariadb-10.5.8\"\n\n# to use sqlite:\nDATABASE_URL=\"sqlite:///%kernel.cache_dir%/compatinfo-db.sqlite\"\n\n# to use postgresql:\nDATABASE_URL=\"postgresql://db_user:db_password@127.0.0.1:5432/db_name?serverVersion=11&amp;charset=utf8\"\n</code></pre> <p>After installation, or if you change database connection, you have to run following command(s):</p> <ul> <li><code>bin/phpcompatinfo db:create</code></li> <li><code>bin/phpcompatinfo db:init</code></li> </ul> <p>At first run of CompatInfoDB, <code>DATABASE_URL</code> will be set to use default SQLite connection</p>"},{"location":"getting-started/#build-phar-distribution","title":"Build PHAR distribution","text":"<p>Uses the BOX Manifest to compile your PHAR version of application. Configuration file (<code>box.json.dist</code>) is provided with each release of phpCompatInfo.</p>"},{"location":"01_Components/01_PHP-Parser/Visitors/","title":"Visitors","text":""},{"location":"01_Components/01_PHP-Parser/Visitors/#visitors","title":"Visitors","text":""},{"location":"01_Components/01_PHP-Parser/Visitors/#parentcontextvisitor","title":"ParentContextVisitor","text":"<p>The AST does not store parent nodes by default. However, the <code>ParentContextVisitor</code> is used to achieve this in the following context: when elements are either class, interface, trait, function, closure, method, arrow function and property.</p> <p>The parent context visitor accepts an option array as the first argument, with the following default values:</p> <ul> <li>the <code>nodeAttributeParentKeyStore</code> option contains the name of a new node attribute (default to <code>bartlett.parent</code>) that will store the parent node of only elements referenced above.</li> </ul> <p>The AST does not include a namespace node (<code>PhpParser\\Node\\Stmt\\Namespace_</code>) when source code is only in global namespace. The second goal of <code>ParentContextVisitor</code> is to add this node at top of node list to traverse (during the <code>beforeTraverse</code> method).</p> <p>That will allow the <code>CompatibilityAnalyser</code> to show PHP versions required of full code in global namespace context.</p> <p>For example with such script: <pre><code>&lt;?php declare(strict_types=1);\n\nfunction returnArray() {\n    return ['one', 'two', 'three'];\n}\n$arrayValue1 = returnArray()[0];\n</code></pre></p> <p>PHP versions detected are :</p> <ul> <li>7.0.0 for full script, due to declare directive usage.</li> <li>5.4.0 for short array usage in <code>returnArray</code> function.</li> <li>5.4.0 for usage of array dereferencing syntax when calling <code>returnArray</code> function.</li> </ul>"},{"location":"01_Components/01_PHP-Parser/Visitors/#nameresolvervisitor","title":"NameResolverVisitor","text":"<p>The <code>NameResolverVisitor</code> is applied to resolve names of each major elements where the PHP versions should be detected. It extends the basic Name Resolver by default that did not add <code>namespacedName</code> property on all elements.</p> <p>The name resolver accepts an option array as the second argument, with the following default values:</p> <ul> <li>the <code>nodeAttributeParentKeyStore</code> option contains the name of a new node attribute (default to <code>bartlett.parent</code>) that reference the parent node of the following elements : class, interface, trait, function, closure, method, arrow function and property.</li> </ul> <p>After running this visitor, the parent node can be obtained through <code>$node-&gt;getAttribute('bartlett.parent')</code>. This will be useful with the <code>CompatibilityAnalyser</code> that should give PHP versions of each element including in their parent context.</p>"},{"location":"01_Components/01_PHP-Parser/Visitors/#versionresolvervisitor","title":"VersionResolverVisitor","text":"<p>The <code>VersionResolverVisitor</code> is in charge to initialize PHP versions on each element (namespace, class, interface, trait, function, closure, method or arrow function nodes) of source code context.</p> <p>The version resolver accepts an option array as the second argument, with the following default values:</p> <ul> <li> <p>the <code>nodeAttributeParentKeyStore</code> option contains the name of a new node attribute (default to <code>bartlett.parent</code>). Its value must be the same as the option used in the <code>NameResolverVisitor</code>.</p> </li> <li> <p>the <code>nodeAttributeKeyStore</code> option contains the name of a new node attribute (default to <code>bartlett.data_collector</code>) that store the PHP versions of major elements.</p> </li> </ul> <p>After running this visitor, the PHP versions can be obtained through <code>$node-&gt;getAttribute('bartlett.data_collector')</code>. This will be useful with the <code>CompatibilityAnalyser</code>.</p> <p>When user classes, interfaces or traits referenced extensions elements (with type hinting, parameters and return), it will call a local SQLite database to get information. Current database project supports all data for almost a hundred extensions on each PHP versions from 5.2.17 to latest 7.4</p> <p>The version resolver accepts an instance of <code>Bartlett\\CompatInfo\\Collection\\ReferenceCollectionInterface</code> as the first argument.</p> <p>This collection referenced all information in the SQLite database.</p>"},{"location":"01_Components/01_PHP-Parser/Visitors/#filtervisitor","title":"FilterVisitor","text":"<p>The <code>FilterVisitor</code> is applied to retrieve all AST nodes that have attributes identified by <code>nodeAttributeKeyStore</code> option.</p> <ul> <li>Data in final format are retrieved by the <code>FilterVisitor::getCollection()</code> method.</li> <li>Data are normalized with the normalizer of the Symfony Serializer component, and transformed from internal format to final format by the <code>NodeNormalizer</code> of DataCollector.</li> </ul> <p>This visitor is used by the <code>VersionDataCollector</code>.</p>"},{"location":"01_Components/02_Profiler/Collectors/","title":"Data Collectors","text":""},{"location":"01_Components/02_Profiler/Collectors/#profiler","title":"Profiler","text":"<p>The <code>Profiler</code> Component of new architecture 5.4 gets its information using services called \"DataCollector\".</p> <p>This is the same data collected during source code analysis that are passed to different views displayed to the User.</p>"},{"location":"01_Components/02_Profiler/Collectors/#data-collectors","title":"Data Collectors","text":"<p>While walking the AST, different visitors will initialize context and capture results of the PHP versions detected of all elements (namespaces, classes, interfaces, traits, methods, functions, constants).</p> <p>At the end of parsing a source file, the <code>afterTraverse()</code> method calls the <code>Profiler</code> and each collector attached to it.</p> <p>These \"DataCollectors\" that must implement <code>DataCollectorInterface</code> contract will retrieve information written in AST nodes that have an <code>nodeAttributeKeyStore</code> attribute.</p> <p>The <code>VersionDataCollector</code> is a specific data collector to <code>CompatibilityAnalyser</code>.</p>"},{"location":"01_Components/02_Profiler/Collectors/#versiondatacollector","title":"VersionDataCollector","text":"<p>The <code>VersionDataCollector</code> is in charge to initialize minimum PHP versions of all major elements (namespaces, classes, interfaces, traits, methods, functions, constants) of a source file.</p>"},{"location":"01_Components/03_Sniffs/Features/","title":"Sniffs","text":""},{"location":"01_Components/03_Sniffs/Features/#sniffs","title":"Sniffs","text":"<p>Before version 5.4, PHP CompatInfo and its compatibility analyser was monolithic code.</p> <p>Since version 5.4, PHP CompatInfo used a sniff architecture that simplify maintainability of existing code and allows to extend it more easily.</p> <p>Each sniff, is in charge to detect a PHP language feature. Here is the list of features supported and their corresponding sniffs :</p>"},{"location":"01_Components/03_Sniffs/Features/#php-50","title":"PHP 5.0","text":"Sniff category Sniff class name PHP Feature Classes MethodDeclarationSniff Method Visibility Classes PropertyDeclarationSniff Properties"},{"location":"01_Components/03_Sniffs/Features/#php-51","title":"PHP 5.1","text":"Sniff category Sniff class name PHP Feature Classes MagicMethodsSniff Magic Methods"},{"location":"01_Components/03_Sniffs/Features/#php-52","title":"PHP 5.2","text":"Sniff category Sniff class name PHP Feature"},{"location":"01_Components/03_Sniffs/Features/#php-53","title":"PHP 5.3","text":"Sniff category Sniff class name PHP Feature Classes MagicMethodsSniff Magic Methods Classes DynamicAccessSniff Dynamic Static Method access Classes DynamicAccessSniff Dynamic Static Property access ControlStructures DeclareSniff Declare ControlStructures GotoSniff Goto FunctionDeclarations ClosureSniff Anonymous functions <code>VersionResolverVisitor</code> Closures Operators ShortTernaryOperatorSniff Ternary Operator <code>VersionResolverVisitor</code> Namespaces TextProcessing CryptStringSniff CRYPT_BLOWFISH security fix details"},{"location":"01_Components/03_Sniffs/Features/#php-54","title":"PHP 5.4","text":"Sniff category Sniff class name PHP Feature Arrays ArrayDereferencingSyntaxSniff Array dereferencing Arrays ShortArraySyntaxSniff Short array syntax Classes ClassMemberAccessSniff Class member access on instantiation Expressions ClassExprSyntaxSniff Class::{expr}() syntax Numbers BinaryNumberFormatSniff Binary number format UseDeclarations UseTraitSniff Traits <code>VersionResolverVisitor</code> Traits"},{"location":"01_Components/03_Sniffs/Features/#php-55","title":"PHP 5.5","text":"Sniff category Sniff class name PHP Feature Constants MagicClassConstantSniff ::class syntax Expressions EmptySniff empty() supports arbitrary expressions Generators GeneratorSniff Generators"},{"location":"01_Components/03_Sniffs/Features/#php-56","title":"PHP 5.6","text":"Sniff category Sniff class name PHP Feature Classes MagicMethodsSniff Magic Methods Constants ConstSyntaxSniff Contant Expressions Operators PowOperatorSniff Exponentiation UseDeclarations UseConstFunctionSniff use function and use const"},{"location":"01_Components/03_Sniffs/Features/#php-70","title":"PHP 7.0","text":"Sniff category Sniff class name PHP Feature FunctionDeclarations ParamTypeDeclarationSniff Scalar type declarations FunctionDeclarations ReturnTypeDeclarationSniff Return type declarations Keywords ReservedSniff Scalar type declarations Operators NullCoalesceOperatorSniff Null coalescing operator Operators CombinedComparisonOperatorSniff Spaceship operator Constant arrays using define() Classes AnonymousClassSniff Anonymous classes Classes ClassMemberAccessSniff Class member access on cloning ControlStructures DeclareSniff Declare Generators GeneratorSniff Generator Return Expressions Generators GeneratorSniff Generator Delegation"},{"location":"01_Components/03_Sniffs/Features/#php-71","title":"PHP 7.1","text":"Sniff category Sniff class name PHP Feature FunctionDeclarations ParamTypeDeclarationSniff Nullable types FunctionDeclarations ReturnTypeDeclarationSniff Nullable types FunctionDeclarations ReturnTypeDeclarationSniff Void functions Symmetric array destructuring Class constant visibility FunctionDeclarations ParamTypeDeclarationSniff iterable pseudo-type Keywords ReservedSniff iterable pseudo-type Multi catch exception handling Support for keys in list()"},{"location":"01_Components/03_Sniffs/Features/#php-72","title":"PHP 7.2","text":"Sniff category Sniff class name PHP Feature Keywords ReservedSniff New object type"},{"location":"01_Components/03_Sniffs/Features/#php-73","title":"PHP 7.3","text":"Sniff category Sniff class name PHP Feature FunctionCalls SameSiteCookieSniff SetCookie accept $options argument"},{"location":"01_Components/03_Sniffs/Features/#php-74","title":"PHP 7.4","text":"Sniff category Sniff class name PHP Feature Arrays ArrayUnpackingSyntaxSniff Array unpacking support for numeric-keyed arrays Classes TypedPropertySniff Typed properties FunctionDeclarations ArrowFunctionSniff Arrow functions <code>VersionResolverVisitor</code> Arrow functions"},{"location":"01_Components/03_Sniffs/Features/#php-80","title":"PHP 8.0","text":"Sniff category Sniff class name PHP Feature Attributes AttributeSniff Attributes Classes PropertyPromotionSniff Constructor property promotion ControlStructures MatchSniff Match expressions ControlStructures NonCapturingCatchSniff Non-capturing catches FunctionDeclarations NamedArgumentDeclarationSniff Named arguments FunctionDeclarations ParamTypeDeclarationSniff Union types FunctionDeclarations TrailingCommaSniff Trailing comma Operators NullsafeOperatorSniff Nullsafe operator"},{"location":"01_Components/03_Sniffs/Features/#php-81","title":"PHP 8.1","text":"Sniff category Sniff class name PHP Feature Arrays ArrayUnpackingSyntaxSniff Array unpacking support for string-keyed arrays Classes ReadonlyPropertySniff Readonly Properties Classes NewInitializerSniff New initializers Constants ClassConstantSniff Final class constants Enumerations EnumerationSniff Enumerations Fibers FiberSniff Fibers FunctionDeclarations FirstClassCallableSniff First class callable FunctionDeclarations ParamTypeDeclarationSniff Pure Intersection Types FunctionDeclarations ReturnTypeDeclarationSniff Pure Intersection Types FunctionDeclarations ReturnTypeDeclarationSniff Never return type Numbers OctalNumberFormatSniff Explicit Octal numeral notation"},{"location":"01_Components/03_Sniffs/Features/#php-82","title":"PHP 8.2","text":"Sniff category Sniff class name PHP Feature Attributes AllowDynamicPropertiesAttributeSniff AllowDynamicProperties attribute Attributes SensitiveParameterAttributeSniff SensitiveParameter attribute Classes ReadonlyClassSniff Readonly Classes Constants ConstantsInTraitsSniff Constants in Traits FunctionDeclarations ParamTypeDeclarationSniff Disjunctive Normal Form Types FunctionDeclarations ReturnTypeDeclarationSniff Allow null, false, and true as stand-alone types TextProcessing DeprecateDollarBraceStringInterpolationSniff Deprecated \\${} string interpolation"},{"location":"01_Components/03_Sniffs/Features/#special-cases","title":"Special cases","text":"<ul> <li>Namespaces declaration have no sniff, because its detected by the <code>VersionResolverVisitor</code></li> <li>Classes declaration have no sniff, because its detected by the <code>VersionResolverVisitor</code></li> <li>Interfaces declaration have no sniff, because its detected by the <code>VersionResolverVisitor</code></li> <li>Traits declaration have no sniff, because its detected by the <code>VersionResolverVisitor</code></li> <li>Closures are initialized by the <code>VersionResolverVisitor</code> and keywords (this, self, parent, static) are detected with <code>ClosureSniff</code></li> <li>Arrow functions have no sniff, because its detected by the <code>VersionResolverVisitor</code>, but has its test case with <code>ArrowFunctionSniffTest</code></li> </ul>"},{"location":"01_Components/04_Extensions/Hooks/","title":"Extensions","text":""},{"location":"01_Components/04_Extensions/Hooks/#registering-extensions","title":"Registering Extensions","text":"<p>If you are using the <code>config/set/default.php</code> configuration file, your extension classes are already registered as services.</p> <pre><code>&lt;?php\nuse Bartlett\\CompatInfo\\Application\\Extension\\ExtensionInterface;\nuse Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;\n\nreturn static function (ContainerConfigurator $containerConfigurator): void\n{\n    $services = $containerConfigurator-&gt;services();\n\n    $services-&gt;instanceof(ExtensionInterface::class)\n        -&gt;tag('app.extension')\n    ;\n}\n</code></pre>"},{"location":"01_Components/04_Extensions/Hooks/#hooks","title":"Hooks","text":"<p>CompatInfo Extensions may implement one or more of these interfaces:</p> <ul> <li> <p><code>BeforeAnalysisInterface</code> - called before CompatInfo begins to run analysis.</p> </li> <li> <p><code>AfterAnalysisInterface</code> - called after CompatInfo has completed its analysis. Use this hook if you want to do something with the analysis results.</p> </li> <li> <p><code>BeforeFileAnalysisInterface</code> - called before CompatInfo analyzes a file.</p> </li> <li> <p><code>AfterFileAnalysisInterface</code> - called after CompatInfo analyzes a file.</p> </li> <li> <p><code>BeforeTraverseAstInterface</code> - called once before AST traversal.</p> </li> <li> <p><code>AfterTraverseAstInterface</code> - called once after AST traversal.</p> </li> <li> <p><code>BeforeProcessNodeInterface</code> - called before entering a node.</p> </li> <li> <p><code>AfterProcessNodeInterface</code> - called after leaving a node.</p> </li> <li> <p><code>BeforeSetupSniffInterface</code> - called before initializes a sniff.</p> </li> <li> <p><code>AfterTearDownSniffInterface</code> - called after tear down a sniff.</p> </li> <li> <p><code>BeforeProcessSniffInterface</code> - called before entering a sniff.</p> </li> <li> <p><code>AfterProcessSniffInterface</code> - called after leaving a sniff.</p> </li> </ul> <p>Furthermore extensions may implement the <code>Symfony\\Component\\EventDispatcher\\EventSubscriberInterface</code>.</p> <p>See built-in extensions <code>Application\\Extension\\Logger</code> and <code>Application\\Extension\\ProgressBar</code> as examples.</p>"},{"location":"01_Components/04_Extensions/Reporter/","title":"Output format","text":""},{"location":"01_Components/04_Extensions/Reporter/#output-format","title":"Output format","text":"<p>Since version 6.1.0, PHP CompatInfo supports different output formats through various formatters.</p> <p>You can pass the following keywords to the <code>--output</code> CLI option of the <code>analyser:run</code> command in order to affect the output:</p> <ul> <li><code>console</code>: default table format for human reading.</li> <li><code>dump</code>: raw format (<code>var_dump</code>) for debugging purpose only.</li> <li><code>json</code>: creates minified json file format output without whitespaces.</li> <li><code>sarif</code>: creates a Static Analysis Results Interchange Format to share results with other tools or applications</li> </ul> <p>You can also implement your own custom formatter by implementing the <code>Bartlett\\CompatInfo\\Application\\Extension\\Reporter\\FormatterInterface</code> interface in a new class.</p> <p>This is how the <code>FormatterInterface</code> interface looks like:</p> <pre><code>&lt;?php declare(strict_types=1);\n\nnamespace Bartlett\\CompatInfo\\Application\\Extension\\Reporter;\n\ninterface FormatterInterface\n{\n    /**\n     * @param object $object\n     * @param string[] $formats\n     * @return bool\n     */\n    public function supportsFormatting(object $object, array $formats): bool;\n\n    /**\n     * @param mixed $data Data to format\n     * @return void\n     */\n    public function format($data): void;\n}\n</code></pre> <p>Before you can start using your custom output formatter, you have to include it in a new class that implement the <code>Bartlett\\CompatInfo\\Application\\Extension\\ExtensionInterface</code> interface (see Registering Extensions chapter for details).</p> <p><code>ConsoleReporter</code> is a good first example to follow.</p>"},{"location":"01_Components/05_Polyfills/Features/","title":"Features","text":""},{"location":"01_Components/05_Polyfills/Features/#polyfills","title":"Polyfills","text":"<p>Before version 6.4, PHP CompatInfo and its compatibility analyser was not able to detect packages that provides compatibility layers for some extensions and functions.</p> <p>Since version 6.4, PHP CompatInfo used a polyfill architecture to detect such packages that backports features found in the latest PHP versions.</p> <p>Each polyfill package must be supported both with PHP CompatInfoDB (since release 4.2.0) to identify PHP features (classes, constants, functions), and CompatInfo itself by services implementing the <code>Bartlett\\CompatInfo\\Application\\Polyfills\\PolyfillInterface</code></p> <p>Here is the list of available polyfill services supported (namespace <code>Bartlett\\CompatInfo\\Application\\Polyfills</code>) :</p>"},{"location":"01_Components/05_Polyfills/Features/#ctype-extension","title":"Ctype extension","text":"Polyfill class name Description <code>SymfonyCtype</code> This polyfill detects PHP native <code>ctype_*</code> functions to users who run php versions without the ctype extension <p>Available since release 6.4.0</p>"},{"location":"01_Components/05_Polyfills/Features/#iconv-extension","title":"Iconv extension","text":"Polyfill class name Description <code>SymfonyIconv</code> This polyfill detects PHP native <code>iconv_*</code> functions to users who run php versions without the iconv extension <p>Available since release 6.4.0</p>"},{"location":"01_Components/05_Polyfills/Features/#mbstring-extension","title":"Mbstring extension","text":"Polyfill class name Description <code>SymfonyMbstring</code> This polyfill detects PHP native <code>mb_*</code> functions to users who run php versions without the mbstring extension <p>Available since release 6.4.0</p>"},{"location":"01_Components/05_Polyfills/Features/#php-70","title":"PHP 7.0","text":"Polyfill class name Description <code>SymfonyPhp70</code> This polyfill detects features unavailable in releases prior to PHP 7.0 <p>Available since release 6.4.0</p>"},{"location":"01_Components/05_Polyfills/Features/#php-71","title":"PHP 7.1","text":"Polyfill class name Description <code>SymfonyPhp71</code> This polyfill detects features unavailable in releases prior to PHP 7.1 <p>Available since release 6.4.0</p>"},{"location":"01_Components/05_Polyfills/Features/#php-72","title":"PHP 7.2","text":"Polyfill class name Description <code>SymfonyPhp72</code> This polyfill detects features unavailable in releases prior to PHP 7.2 <p>Available since release 6.4.0</p>"},{"location":"01_Components/05_Polyfills/Features/#php-73","title":"PHP 7.3","text":"Polyfill class name Description <code>SymfonyPhp73</code> This polyfill detects features unavailable in releases prior to PHP 7.3 <p>Available since release 6.4.0</p>"},{"location":"01_Components/05_Polyfills/Features/#php-74","title":"PHP 7.4","text":"Polyfill class name Description <code>SymfonyPhp74</code> This polyfill detects features unavailable in releases prior to PHP 7.4 <p>Available since release 6.4.0</p>"},{"location":"01_Components/05_Polyfills/Features/#php-80","title":"PHP 8.0","text":"Polyfill class name Description <code>SymfonyPhp80</code> This polyfill detects features unavailable in releases prior to PHP 8.0 <p>Available since release 6.4.0</p>"},{"location":"01_Components/05_Polyfills/Features/#php-81","title":"PHP 8.1","text":"Polyfill class name Description <code>SymfonyPhp81</code> This polyfill detects features unavailable in releases prior to PHP 8.1 <p>Available since release 6.4.0</p>"},{"location":"01_Components/05_Polyfills/Features/#php-82","title":"PHP 8.2","text":"Polyfill class name Description <code>SymfonyPhp82</code> This polyfill detects features unavailable in releases prior to PHP 8.2 <p>Available since release 6.5.0</p>"},{"location":"02_Configs/","title":"About","text":""},{"location":"02_Configs/#about","title":"About","text":"<p>Before version 5.4, PHP CompatInfo used JSON config file handled by PHP Reflect Api/V3/Config object,</p> <p>With version 5.4+, PHP CompatInfo uses now the Symfony DependencyInjection component. It allows you to standardize and centralize the way objects are constructed in console application.</p> <p>Read more how Setting up the Container with Configuration Files.</p> <p>Old plugin system can be replaced with the <code>Bartlett\\CompatInfo\\Event\\Dispatcher\\EventDispatcher</code> service. Default version add two subscribers (<code>ProfileEventSubscriber</code> and <code>LogEventSubscriber</code>) to listen and handle all Application events.</p>"},{"location":"02_Configs/Default/","title":"Default","text":""},{"location":"02_Configs/Default/#default-services-and-parameters","title":"Default Services and Parameters","text":"<p>The closure returned by <code>config/default.php</code> file allows loading the following services:</p> Service ID Service Class Description <code>Symfony\\Component\\Console\\Input\\InputInterface</code> <code>Bartlett\\CompatInfo\\Console\\Input\\Input</code> Represents an input coming from the CLI arguments <code>Symfony\\Component\\Console\\Output\\OutputInterface</code> <code>Bartlett\\CompatInfo\\Console\\Output\\Output</code> Is the default class for all CLI output <code>Symfony\\Component\\Stopwatch\\Stopwatch</code> <code>Symfony\\Component\\Stopwatch\\Stopwatch</code> Provides a way to profile your code analysis <code>Psr\\Log\\LoggerInterface</code> <code>Bartlett\\CompatInfo\\Logger\\DefaultLogger</code> Provides a default PSR3 compatible logger <code>Bartlett\\CompatInfo\\Event\\Subscriber\\ProfileEventSubscriber</code> <code>Bartlett\\CompatInfo\\Event\\Subscriber\\ProfileEventSubscriber</code> Subscriber that provides listeners to profile console commands <code>Bartlett\\CompatInfo\\Event\\Subscriber\\LogEventSubscriber</code> <code>Bartlett\\CompatInfo\\Event\\Subscriber\\LogEventSubscriber</code> Subscriber that provides listeners to log all application events <code>Symfony\\Component\\EventDispatcher\\EventDispatcherInterface</code> <code>Bartlett\\CompatInfo\\Event\\Dispatcher\\EventDispatcher</code> Dispatcher that handle all listeners attached by two subscribers <p>Provides also some parameters for the PSR3 logger:</p> Parameter ID Description <code>app.log_stream_path</code> Path to a local file <code>app.log_channel</code> Channel name <code>app.log_level</code> Minimum logging level that will be handled"},{"location":"02_Configs/None/","title":"None","text":""},{"location":"02_Configs/None/#none-services-and-parameters","title":"None Services and Parameters","text":"<p>The closure returned by <code>config/none.php</code> file allows only loading the main Application service, and nothing else.</p>"},{"location":"03_Conditional_Code/100_Limitation/","title":"Some Limitation","text":""},{"location":"03_Conditional_Code/100_Limitation/#limitation","title":"Limitation","text":"<pre><code>// @link https://github.com/nikic/PHP-Parser/blob/v4.10.0/lib/PhpParser/Lexer.php#L413-L433\n\n$compatTokens = [\n    // PHP 7.4\n    'T_BAD_CHARACTER',\n    'T_FN',\n    'T_COALESCE_EQUAL',\n    // PHP 8.0\n    'T_NAME_QUALIFIED',\n    'T_NAME_FULLY_QUALIFIED',\n    'T_NAME_RELATIVE',\n    'T_MATCH',\n    'T_NULLSAFE_OBJECT_OPERATOR',\n    'T_ATTRIBUTE',\n];\n\nforeach ($compatTokens as $token) {\n    if (\\defined($token)) {\n        $tokenId = \\constant($token);\n    }\n}\n</code></pre> <p>Here we cannot detect that constants listed in <code>$compatTokens</code> array are perhaps condition code.</p> <p>Later, in another script or even the same one, if we used these constants we will detect them as PHP 7.4 or PHP 8.0 versions, but it's not the reality.</p> <p>Example with</p> <pre><code>// @link https://github.com/nikic/PHP-Parser/blob/v4.10.0/lib/PhpParser/Lexer.php#L110\n$tokens[] = [\\T_BAD_CHARACTER, $chr, $line];\n</code></pre> <p>Console output tell us</p> <pre><code>Constants Analysis\n\n    Constant                   REF       EXT min/Max PHP min/Max\n    T_ABSTRACT                 tokenizer 5.0.0       5.0.0\n    T_ARRAY                    tokenizer 4.2.0       4.2.0\n    T_AS                       tokenizer 4.2.0       4.2.0\n    T_ATTRIBUTE                user                  4.0.0\n    T_BAD_CHARACTER            tokenizer 7.4.0       7.4.0beta1\n    T_BREAK                    tokenizer 4.2.0       4.2.0\n    ... more ...\n    true                       Core      4.0.0       4.0.0\n    Total [98]                                       7.4.0beta1\n\nNo condition found\n\nRequires PHP 7.4.0beta1 (min)\n</code></pre> <p>Caution when you read such results. Until a new CompatInfo version is able to check this situation for us !</p>"},{"location":"03_Conditional_Code/1_Introduction/","title":"Introduction","text":""},{"location":"03_Conditional_Code/1_Introduction/#introduction","title":"Introduction","text":"<p>What is considered as a conditional code ?</p> <p>Each time you found following functions in source code :</p> <ul> <li>extension_loaded</li> <li>function_exists</li> <li>method_exists</li> <li>class_exists</li> <li>interface_exists</li> <li>trait_exists</li> <li>defined</li> </ul> <p>Note for developers, this is the <code>Bartlett\\CompatInfo\\Sniffs\\Expressions\\ConditionalCodeSniff</code> sniff that handle it !</p> <p>This feature was improve since previous versions until 5.4, but has some limits you should know.</p> <ul> <li>if we detect one of these previous function, we do not compute <code>php.min</code>, <code>php.max</code>, <code>ext.*</code> version elements to global or parent results.</li> </ul> <p>That means, with this code :</p> <pre><code>&lt;?php\nClass C\n{\n    function encode()\n    {\n        if (!function_exists('json_encode')) {\n            function json_encode($value, $options = 0, $depth = 512) {\n                // ... do something\n            }\n        }\n    }\n}\n</code></pre> <p>When we run analyser, we got this output :</p> <pre><code>Data Source Analysed\n\nDirectories                                          1\nFiles                                                1\nErrors                                               0\n\n\nExtensions Analysis\n\n    Extension REF  EXT min/Max PHP min/Max\n    Core      Core 4.0.0       4.0.0\n C  json      json 5.2.0       5.2.0\n    Total [2]                  4.0.0\n\nNamespaces Analysis\n\n    Namespace REF  EXT min/Max PHP min/Max\n              Core             4.0.0\n    Total [1]                  4.0.0\n\nNo interface found\n\nNo trait found\n\nClasses Analysis\n\n    Class     REF  EXT min/Max PHP min/Max\n    C         user             4.0.0\n    Total [1]                  4.0.0\n\nNo generator found\n\nFunctions Analysis\n\n    Function             REF  EXT min/Max PHP min/Max\n    C\\encode\\json_encode user             4.0.0\n    function_exists      Core 4.0.0       4.0.0\n C  json_encode          json 5.2.0       5.2.0\n    Total [3]                             4.0.0\n\nNo constant found\n\nConditions Analysis\n\n    Condition                    REF  EXT min/Max PHP min/Max\n    function_exists(json_encode) json 5.2.0       5.2.0\n    Total [1]                                     5.2.0\n\nRequires PHP 4.0.0 (min)\n</code></pre> <p>Each data with a <code>C</code> in front of line tell us that the code is conditional.</p> <p><code>json_encode</code> native function that come with PHP 7.2 is only used for PHP 7.2 or greater and the user function <code>C\\encode\\json_encode</code> is used for PHP versions less or equal 7.1.*</p> <p>This is a very simple example. There are much more difficult situation that CompatInfo can handle, and some that we cannot !</p>"},{"location":"03_Conditional_Code/2_Indirect_Call/","title":"Indirect Call","text":""},{"location":"03_Conditional_Code/2_Indirect_Call/#indirect-calls","title":"Indirect calls","text":"<p>By indirect calls, CompatInfo is unable (yet) to resolve such type of code.</p> <pre><code>$ext = 'intl';\n\nif (extension_loaded($ext)) {\n    // ... do something\n}\n</code></pre> <p><code>extension_loaded</code> is well detected but not the extension name.</p>"},{"location":"03_Conditional_Code/3_Multiple_Signature/","title":"Multiple Signature","text":""},{"location":"03_Conditional_Code/3_Multiple_Signature/#multiple-signatures","title":"Multiple signatures","text":"<p>Face to this source code, CompatInfo is unable to know what <code>idn_to_ascii</code> signature is the minimum.</p> <pre><code>if (function_exists('idn_to_ascii')) {\n    if (defined('INTL_IDNA_VARIANT_UTS46')) {\n        $domain = idn_to_ascii($domain, 0, INTL_IDNA_VARIANT_UTS46);\n    } else {\n        $domain = idn_to_ascii($domain);\n    }\n}\n</code></pre> <p>We know (idn_to_ascii changelog) that by using <code>$variant</code> parameter, the minimum PHP version required is 7.4.0, otherwise it's only 5.2.4</p> <p>So the console output look like</p> <pre><code>Data Source Analysed\n\nDirectories                                          1\nFiles                                                1\nErrors                                               0\n\n\nExtensions Analysis\n\n    Extension REF  EXT min/Max PHP min/Max\n    Core      Core 4.0.0       4.0.0\n C  intl      intl 2.0.0b1     5.2.4\n    Total [2]                  4.0.0\n\nNamespaces Analysis\n\n    Namespace REF  EXT min/Max PHP min/Max\n              Core             4.0.0\n    Total [1]                  4.0.0\n\nNo interface found\n\nNo trait found\n\nNo class found\n\nNo generator found\n\nFunctions Analysis\n\n    Function        REF  EXT min/Max PHP min/Max\n    defined         Core 4.0.0       4.0.0\n    function_exists Core 4.0.0       4.0.0\n C  idn_to_ascii    intl 1.0.2       5.2.4\n    Total [3]                        4.0.0\n\nConstants Analysis\n\n    Constant                REF  EXT min/Max PHP min/Max\n C  INTL_IDNA_VARIANT_UTS46 intl 2.0.0b1     5.2.4\n    Total [1]                                4.0.0\n\nConditions Analysis\n\n    Condition                        REF  EXT min/Max PHP min/Max\n    defined(INTL_IDNA_VARIANT_UTS46) intl 2.0.0b1     5.2.4\n    function_exists(idn_to_ascii)    intl 1.0.2       5.2.4\n    Total [2]                                         5.2.4\n\nRequires PHP 4.0.0 (min)\n</code></pre>"},{"location":"04_Exclude_Folders/","title":"Exclude Directories","text":""},{"location":"04_Exclude_Folders/#about","title":"About","text":"<p>Two different ways to exclude directories from scan.</p>"},{"location":"04_Exclude_Folders/#with-console-cli","title":"With Console (CLI)","text":"<p>Since version 5.5.2, you can provide the new <code>--exclude</code> option. This option accept multiple values as shown next:</p> <pre><code>bin/phpcompatinfo analyser:run . --exclude vendor --exclude tests\n</code></pre>"},{"location":"04_Exclude_Folders/#with-php-script-api","title":"With php script (API)","text":"<pre><code>require_once 'config/bootstrap.php';\n\nuse Bartlett\\CompatInfo\\Application\\Profiler\\Profile;\nuse Bartlett\\CompatInfo\\Application\\Query\\Analyser\\Compatibility\\GetCompatibilityQuery;\nuse Bartlett\\CompatInfo\\Application\\Query\\QueryBusInterface;\n\nuse Symfony\\Component\\Messenger\\Exception\\HandlerFailedException;\n\n$container = require 'config/container.php';\n\n$queryBus = $container-&gt;get(QueryBusInterface::class);\n\n// perform request, on a data source with default analyser\n$dataSource = __DIR__;\n// exclude some folders from scanning\n$excludeDirs = ['vendor', 'tests'];\n\n// equivalent to CLI command `phpcompatinfo analyser:run . --exclude vendor --exclude tests`\n$compatibilityQuery = new GetCompatibilityQuery($dataSource, $excludeDirs, false);\ntry {\n    /** @var Profile $profile */\n    $profile = $queryBus-&gt;query($compatibilityQuery);\n    $data = $profile-&gt;getData();\n    $dump = reset($data);\n    var_export($dump);\n} catch (HandlerFailedException $e) {\n    foreach ($e-&gt;getNestedExceptions() as $ex) {\n        printf('Exception -- %s &gt;&gt; %s%s' . $ex-&gt;getMessage(), $ex-&gt;getTraceAsString(), PHP_EOL);\n    };\n}\n</code></pre>"},{"location":"99_Architecture/application/","title":"Application","text":""},{"location":"99_Architecture/application/#application-layer","title":"Application Layer","text":""},{"location":"99_Architecture/application/#analysers","title":"Analyser(s)","text":""},{"location":"99_Architecture/application/#collections","title":"Collection(s)","text":""},{"location":"99_Architecture/application/#data-collectors","title":"Data Collector(s)","text":""},{"location":"99_Architecture/application/#events","title":"Event(s)","text":""},{"location":"99_Architecture/application/#extensions","title":"Extension(s)","text":""},{"location":"99_Architecture/application/#logger","title":"Logger","text":""},{"location":"99_Architecture/application/#parser","title":"Parser","text":""},{"location":"99_Architecture/application/#polyfills","title":"Polyfill(s)","text":""},{"location":"99_Architecture/application/#profiler","title":"Profiler","text":""},{"location":"99_Architecture/application/#querys","title":"Query(s)","text":""},{"location":"99_Architecture/application/#services","title":"Service(s)","text":""},{"location":"99_Architecture/application/#sniffs","title":"Sniff(s)","text":""},{"location":"99_Architecture/infrastructure/","title":"Infrastructure","text":""},{"location":"99_Architecture/infrastructure/#infrastructure-layer","title":"Infrastructure Layer","text":""},{"location":"99_Architecture/infrastructure/#bus","title":"Bus","text":""},{"location":"99_Architecture/infrastructure/#framework","title":"Framework","text":""},{"location":"99_Architecture/presentation/","title":"Presentation","text":""},{"location":"99_Architecture/presentation/#presentation-layer","title":"Presentation Layer","text":""},{"location":"99_Architecture/presentation/#console","title":"Console","text":""}]}